generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Person {
    uuid        String    @id @default(uuid()) // Changed from uuid
    firstName   String
    lastName    String
    email       String    @unique
    phone       String?   @unique // Shortened phoneNumber to phone
    birthDate   DateTime?
    address     String?
    gender      String?
    nationality String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        Arguser?
}

model UserRole {
    uuid        String    @id @default(uuid())
    codeName    String
    commonName  String    @db.VarChar(255)
    description String?   @db.Text
    created_at  DateTime? @db.Timestamp(0)
    updated_at  DateTime? @db.Timestamp(0)
    users       Arguser[]
}

model Arguser {
    uuid                String                @id @default(uuid())
    userName            String                @unique
    accountStatus       String                @default("ENABLED")
    approvalStatus      String                @default("PENDING")
    passwordHash        String
    Person              Person                @relation(fields: [personUuid], references: [uuid])
    personUuid          String                @unique //fk to person uuid
    UserRole            UserRole?             @relation(fields: [userRoleUuid], references: [uuid])
    userRoleUuid        String
    departmentUuid      String?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    pfNo                String
    isSuperAdmin        Boolean               @default(false)
    email_verified_at   DateTime?             @db.Timestamp(0)
    remember_token      String?
    NotifiableUsers     NotifiableUser[]
    ResearchFundings    ResearchFunding[]
    ResearchProgress    ResearchProgress[]
    ResearchProjects    ResearchProject[]
    SupervisionProgress SupervisionProgress[]
    UserPermissions     UserPermission[]
}

model PasswordReset {
    email      String    @id @db.VarChar(255)
    token      String    @db.VarChar(255)
    created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
    id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    tokenable_type String    @db.VarChar(255)
    tokenable_id   BigInt    @db.UnsignedBigInt
    name           String    @db.VarChar(255)
    token          String
    abilities      String?   @db.Text
    last_used_at   DateTime? @db.Timestamp(0)
    expires_at     DateTime? @db.Timestamp(0)
    created_at     DateTime? @db.Timestamp(0)
    updated_at     DateTime? @db.Timestamp(0)
}

//Permissions
model PermissionMaster {
    uuid              String           @id @db.Char(36)
    codeName          String           @db.VarChar(255)
    commonName        String
    path              String           @db.VarChar(255)
    priorityNo        Int
    permissionLevel   Int
    targetRole        Int
    isSuperAdminRight Boolean          @default(false)
    description       String?          @db.Text
    created_at        DateTime?        @db.Timestamp(0)
    updated_at        DateTime?        @db.Timestamp(0)
    UserPermissions   UserPermission[]
}

model UserPermission {
    uuid           String           @id @db.Char(36)
    useridfk       String           @db.VarChar(255)
    permissionidfk String           @db.VarChar(255)
    created_at     DateTime?        @db.Timestamp(0)
    updated_at     DateTime?        @db.Timestamp(0)
    permissions    PermissionMaster @relation(fields: [permissionidfk], references: [uuid], onUpdate: NoAction)
    users          Arguser          @relation(fields: [useridfk], references: [uuid], onUpdate: NoAction)
}

//Proposal Data Models
model Proposal {
    uuid                    String                 @id @default(uuid())
    proposalcode            String
    grantnofk               String
    departmentidfk          String                 @db.Char(36)
    useridfk                String                 @db.Char(36)
    pfnofk                  String                 @db.VarChar(255)
    themefk                 String
    submittedstatus         Boolean                @default(false)
    receivedstatus          Boolean                @default(false)
    caneditstatus           Boolean                @default(true)
    approvalstatus          String                 @default("Pending") @db.VarChar(255)
    highqualification       String                 @db.VarChar(255)
    officephone             String                 @db.VarChar(255)
    cellphone               String                 @db.VarChar(255)
    faxnumber               String                 @db.VarChar(255)
    researchtitle           String?                @db.VarChar(255)
    commencingdate          DateTime?              @db.Date
    terminationdate         DateTime?              @db.Date
    objectives              String?                @db.Text
    hypothesis              String?                @db.Text
    significance            String?                @db.Text
    ethicals                String?                @db.Text
    expoutput               String?                @db.Text
    socio_impact            String?                @db.Text
    res_findings            String?                @db.Text
    comment                 String?                @db.Text
    approvedrejectedbywhofk String?                @db.Char(36)
    created_at              DateTime?              @db.Timestamp(0)
    updated_at              DateTime?              @db.Timestamp(0)
    collaborators           ProposalCollaborator[]
    expenditures            ProposalExpenditure[]
    proposalchanges         ProposalChange[]
    departments             OrgDepartment          @relation(fields: [departmentidfk], references: [uuid], onUpdate: NoAction)
    grants                  ResearchGrant          @relation(fields: [grantnofk], references: [uuid], onUpdate: NoAction)
    researchthemes          ResearchTheme          @relation(fields: [themefk], references: [uuid], onUpdate: NoAction)
    publications            ProposalPublication[]
    researchdesigns         ResearchDesign[]
    workplans               ProposalWorkplan[]

    ResearchProject ResearchProject[]
}

model ProposalCollaborator {
    uuid             String    @id @default(uuid())
    proposalidfk     String
    collaboratorname String    @db.VarChar(255)
    position         String    @db.VarChar(255)
    institution      String    @db.VarChar(255)
    researcharea     String    @db.VarChar(255)
    experience       String    @db.VarChar(255)
    created_at       DateTime? @db.Timestamp(0)
    updated_at       DateTime? @db.Timestamp(0)
    proposals        Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

model ProposalExpenditure {
    uuid         String    @id @default(uuid())
    proposalidfk String
    item         String    @db.VarChar(255)
    itemtype     String    @db.VarChar(255)
    quantity     Int
    unitprice    Decimal   @db.Decimal(8, 2)
    total        Decimal   @db.Decimal(15, 2)
    created_at   DateTime? @db.Timestamp(0)
    updated_at   DateTime? @db.Timestamp(0)
    proposals    Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

model ResearchGrant {
    uuid       String        @id @default(uuid())
    title      String        @db.VarChar(255)
    finyearfk  String
    status     String        @db.VarChar(255)
    created_at DateTime?     @db.Timestamp(0)
    updated_at DateTime?     @db.Timestamp(0)
    finyears   FinancialYear @relation(fields: [finyearfk], references: [uuid], onUpdate: NoAction)
    proposals  Proposal[]
}

model ProposalChange {
    uuid            String    @id @default(uuid())
    proposalidfk    String
    triggerissue    String    @db.Text
    suggestedchange String    @db.Text
    suggestedbyfk   String    @db.VarChar(255)
    status          String    @db.VarChar(255)
    created_at      DateTime? @db.Timestamp(0)
    updated_at      DateTime? @db.Timestamp(0)
    proposals       Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

model ProposalPublication {
    uuid         String    @id @default(uuid())
    proposalidfk String
    authors      String    @db.VarChar(255)
    year         String    @db.VarChar(255)
    title        String    @db.VarChar(255)
    researcharea String    @db.VarChar(255)
    publisher    String    @db.VarChar(255)
    volume       String    @db.VarChar(255)
    pages        Int
    created_at   DateTime? @db.Timestamp(0)
    updated_at   DateTime? @db.Timestamp(0)
    proposals    Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

model ResearchDesign {
    uuid         String    @id @default(uuid())
    proposalidfk String
    summary      String    @db.VarChar(255)
    indicators   String    @db.Text
    verification String    @db.VarChar(255)
    assumptions  String    @db.Text
    goal         String    @db.VarChar(255)
    purpose      String    @db.VarChar(255)
    created_at   DateTime? @db.Timestamp(0)
    updated_at   DateTime? @db.Timestamp(0)
    proposals    Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

model ResearchFunding {
    uuid             String          @id @default(uuid())
    researchidfk     String
    createdby        String          @db.Char(36)
    amount           Float
    created_at       DateTime?       @db.Timestamp(0)
    updated_at       DateTime?       @db.Timestamp(0)
    users            Arguser         @relation(fields: [createdby], references: [uuid], onUpdate: NoAction)
    researchprojects ResearchProject @relation(fields: [researchidfk], references: [uuid], onUpdate: NoAction)
}

model ResearchProgress {
    uuid             String          @id @default(uuid())
    researchidfk     String
    reportedbyfk     String          @db.Char(36)
    report           String          @db.Text
    created_at       DateTime?       @db.Timestamp(0)
    updated_at       DateTime?       @db.Timestamp(0)
    users            Arguser         @relation(fields: [reportedbyfk], references: [uuid], onUpdate: NoAction)
    researchprojects ResearchProject @relation(fields: [researchidfk], references: [uuid], onUpdate: NoAction)
}

model ResearchProject {
    uuid                String                @id @default(uuid())
    researchnumber      String
    proposalidfk        String
    projectstatus       String                @default("active") @db.VarChar(255)
    ispaused            Boolean               @default(false)
    supervisorfk        String?               @db.VarChar(255)
    fundingfinyearfk    String
    created_at          DateTime?             @db.Timestamp(0)
    updated_at          DateTime?             @db.Timestamp(0)
    researchfundings    ResearchFunding[]
    researchprogress    ResearchProgress[]
    finyears            FinancialYear         @relation(fields: [fundingfinyearfk], references: [uuid], onUpdate: NoAction)
    proposals           Proposal              @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
    users               Arguser?              @relation(fields: [supervisorfk], references: [uuid], onDelete: Restrict, onUpdate: NoAction)
    supervisionprogress SupervisionProgress[]
}

model ResearchTheme {
    uuid             String     @id @default(uuid())
    themeName        String
    themeDescription String     @db.Text
    applicableStatus String     @db.VarChar(255)
    created_at       DateTime?  @db.Timestamp(0)
    updated_at       DateTime?  @db.Timestamp(0)
    proposals        Proposal[]
}

model SupervisionProgress {
    uuid             String          @id @default(uuid())
    researchidfk     String
    supervisorfk     String          @db.Char(36)
    report           String          @db.Text
    remark           String          @db.Text
    created_at       DateTime?       @db.Timestamp(0)
    updated_at       DateTime?       @db.Timestamp(0)
    researchprojects ResearchProject @relation(fields: [researchidfk], references: [uuid], onUpdate: NoAction)
    users            Arguser         @relation(fields: [supervisorfk], references: [uuid], onUpdate: NoAction)
}

model ProposalWorkplan {
    uuid         String    @id @db.VarChar(255)
    proposalidfk String
    activity     String    @db.VarChar(255)
    time         String    @db.VarChar(255)
    input        String    @db.VarChar(255)
    facilities   String    @db.VarChar(255)
    bywhom       String    @db.VarChar(255)
    outcome      String    @db.VarChar(255)
    created_at   DateTime? @db.Timestamp(0)
    updated_at   DateTime? @db.Timestamp(0)
    proposals    Proposal  @relation(fields: [proposalidfk], references: [uuid], onUpdate: NoAction)
}

//Administration
model OrgSchool {
    uuid        String          @id @default(uuid())
    schoolname  String          @db.VarChar(255)
    description String          @db.VarChar(255)
    created_at  DateTime?       @db.Timestamp(0)
    updated_at  DateTime?       @db.Timestamp(0)
    departments OrgDepartment[]
}

model OrgDepartment {
    uuid        String     @id @default(uuid())
    schoolfk    String     @db.Char(36)
    shortname   String     @db.VarChar(255)
    description String     @db.VarChar(255)
    created_at  DateTime?  @db.Timestamp(0)
    updated_at  DateTime?  @db.Timestamp(0)
    schools     OrgSchool  @relation(fields: [schoolfk], references: [uuid], onUpdate: NoAction)
    proposals   Proposal[]
}

model FinancialYear {
    uuid             String            @id @default(uuid())
    finyear          String
    startdate        DateTime?         @db.Date
    enddate          DateTime?         @db.Date
    description      String?           @db.VarChar(255)
    created_at       DateTime?         @db.Timestamp(0)
    updated_at       DateTime?         @db.Timestamp(0)
    grants           ResearchGrant[]
    researchprojects ResearchProject[]
}

model FailedJob {
    uuid       String   @id @default(uuid())
    connection String   @db.Text
    queue      String   @db.Text
    payload    String   @db.LongText
    exception  String   @db.LongText
    failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model GlobalSetting {
    uuid       String    @id @default(uuid())
    item       String    @db.VarChar(255)
    value1     String    @db.VarChar(255)
    value2     String?   @db.VarChar(255)
    created_at DateTime? @db.Timestamp(0)
    updated_at DateTime? @db.Timestamp(0)
}

model QueueJob {
    uuid         String @id @default(uuid())
    queue        String @db.VarChar(255)
    payload      String @db.LongText
    attempts     Int    @db.UnsignedTinyInt
    reserved_at  Int?   @db.UnsignedInt
    available_at Int    @db.UnsignedInt
    created_at   Int    @db.UnsignedInt
}

//Notifications
model NotifiableUser {
    uuid              String           @id @default(uuid())
    notificationfk    String           @db.Char(36)
    useridfk          String           @db.Char(36)
    created_at        DateTime?        @db.Timestamp(0)
    updated_at        DateTime?        @db.Timestamp(0)
    notificationtypes NotificationType @relation(fields: [notificationfk], references: [uuid], onUpdate: NoAction)
    users             Arguser          @relation(fields: [useridfk], references: [uuid], onUpdate: NoAction)
}

model NotificationType {
    uuid            String           @id @default(uuid())
    typename        String
    notifyowner     Boolean          @default(false)
    description     String?          @db.Text
    notifiableusers NotifiableUser[]
}
